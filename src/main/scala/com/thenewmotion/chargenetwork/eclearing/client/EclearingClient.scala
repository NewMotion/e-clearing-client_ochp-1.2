package com.thenewmotion.chargenetwork.eclearing.client

import java.util
import javax.xml.namespace.QName
import javax.xml.ws.Service
import javax.xml.ws.soap.SOAPBinding

import com.thenewmotion.chargenetwork.eclearing.EclearingConfig
import com.typesafe.scalalogging.slf4j.Logging
import eu.ochp._1._
import eu.ochp._1_2.OCHP12
import org.apache.cxf.endpoint.Endpoint
import org.apache.cxf.frontend.ClientProxy
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor
import org.apache.wss4j.dom.WSConstants
import org.apache.wss4j.dom.handler.WSHandlerConstants

/**
 * @param cxfClient The SOAP client generated by CXF
 */
class EclearingClient(cxfClient: OCHP12) extends Logging {

  import scala.collection.JavaConverters._

  def setRoamingAuthorisationList(info: Seq[RoamingAuthorisationInfo]): Result = {
    val req: SetRoamingAuthorisationListRequest = new SetRoamingAuthorisationListRequest()
    req.getRoamingAuthorisationInfoArray.addAll(info.asJava)
    val resp = cxfClient.setRoamingAuthorisationList(req)
    Result(resp.getResult.getResultCode.getResultCode, resp.getResult.getResultDescription)
  }

  def roamingAuthorisationList() = {
    val resp: GetRoamingAuthorisationListResponse = cxfClient.getRoamingAuthorisationList(
      new GetRoamingAuthorisationListRequest)
    resp.getRoamingAuthorisationInfoArray.asScala.toList
  }



}

case class Result(resultCode: String,
  resultDescription: String)

object EclearingClient {

  // need to pass the pw to the PwCallbackHandler somehow,
  // but can't pass it to the constructor, else wss4j won't be
  // able to instantiate it
  var password = ""

  def apply(conf: EclearingConfig):EclearingClient = {
    password = conf.password
    lazy val cxfClient = EclearingClient.createCxfClient(conf)
    new EclearingClient(cxfClient)
  }

  private def createCxfClient(conf: EclearingConfig): OCHP12 = {
    val endpoint_address = conf.wsUri
    val servicePort: QName = new QName(endpoint_address, "service port")
    val service: Service = Service.create(null,servicePort)
    service.addPort(servicePort, SOAPBinding.SOAP11HTTP_BINDING, endpoint_address)
    addWSSHeaders(conf, service.getPort(servicePort, classOf[OCHP12]))
  }

  private def addWSSHeaders(conf: EclearingConfig, port: OCHP12): OCHP12 = {
    val client = ClientProxy.getClient(port)
    val cxfEndpoint: Endpoint = client.getEndpoint

    val outProps = new util.HashMap[String, Object]()

    outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN)
    outProps.put(WSHandlerConstants.USER, conf.user)
    outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT)
    outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS,
      new PwCallbackHandler().getClass.getName)

    val wssOut = new WSS4JOutInterceptor(outProps)
    cxfEndpoint.getOutInterceptors.add(wssOut)
    port
  }

  import javax.security.auth.callback.{Callback, CallbackHandler}

import org.apache.wss4j.common.ext.WSPasswordCallback
  private class PwCallbackHandler  extends CallbackHandler {

    def handle( callbacks: Array[Callback]) = {
      val pc: WSPasswordCallback  = callbacks(0).asInstanceOf[WSPasswordCallback]
      pc.setPassword(password)
    }
  }

}
